plugins {
    id "java"
    id "idea"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "pl.allegro.tech.build.axion-release" version "1.10.1"
    id "maven-publish"
    id "checkstyle"
}

group "de.saar.minecraft.spigot-plugin"
description "communication"

version "1.1-SNAPSHOT"

sourceCompatibility = 1.11

repositories {
    mavenLocal()
    mavenCentral()
    maven {url 'https://jitpack.io'}
    maven{url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"}
    // For bungeecord which is required by spigotmc
    maven{url "https://oss.sonatype.org/content/repositories/snapshots/"}
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/minecraft-saar/spigot-plugin")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
            password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
        }
    }
}

publishing {
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

dependencies {
    testCompile group: "junit", name: "junit", version: "4.12"
    implementation group: "org.spigotmc", name: "spigot-api", version: "1.15.2-R0.1-SNAPSHOT"
    implementation group: "com.google.protobuf", name: "protobuf-java", version: "3.9.0"
    implementation group: "io.grpc", name: "grpc-all", version: "1.23.0"
    implementation group: "de.saar.minecraft.infrastructure", name:"networking", version:"1.1.13"
    implementation group: "org.apache.commons", name:"commons-collections4", version:"4.1"
    implementation group: "org.apache.logging.log4j", name: "log4j-core", version: "2.8.2"
    implementation group: "commons-io", name: "commons-io", version: "2.5"
    compile 'com.github.minecraft-saar:shared-resources:7a572320431c89293c09e05d288ae8aa618c044d'
    implementation group: "org.jetbrains", name: "annotations", version: "19.0.0"
}

sourceSets {
    worldtest {
        java {
            srcDirs = ["src/main/java", "src/worldtest/java"]
        }
        resources {
            srcDirs = ["src/worldtest/resources"]
        }
        compileClasspath += sourceSets.main.compileClasspath
        output.dir("build/worldtest")
    }
}

apply plugin: "java"
task worldTestShadowJar(type: Jar) {
    archiveName "worldtest.jar"
    from sourceSets.worldtest.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    checkstyle {
        toolVersion = "8.28"
    }
    checkstyleMain {
        source ='src/main/java'
    }
    checkstyleTest {
        source ='src/test/java'
    }
}
